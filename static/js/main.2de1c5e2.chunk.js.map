{"version":3,"sources":["components/Card.js","components/Card_List.js","components/Scroll.js","components/SearchBox.js","containers/ErrorBoundary.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","id","className","src","alt","Card_List","robots","cardsArray","map","user","i","key","Scroll","style","overflowY","border","height","children","SearchBox","searchChange","searchField","type","placeholder","onChange","ErrorBoundary","state","hasError","componentDidCatch","error","info","setState","this","Component","Header","App","componentDidMount","onRequestRobots","isPending","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","thunkMiddleware","rootReducer","combineReducers","action","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.2de1c5e2.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = (props) => {\n    const {name, email, id} = props\n    return (\n        <div className=\"tc bg-light-green dib br3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}?50x50`} alt=\"robots\" />\n            <div>\n                <h1>{name}</h1>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;\n","import React from \"react\";\n\nimport Card from \"./Card\";\n\nconst Card_List = ({ robots }) => {\n    const cardsArray = robots.map((user, i) => (\n        <Card\n            key={i}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n        />\n    ));\n    return <div>{cardsArray}</div>;\n};\n\nexport default Card_List;\n","import React from 'react'\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll\n","import React from \"react\";\n\nconst SearchBox = ({ searchChange, searchField }) => {\n    return (\n        <div className=\"pa2\">\n            <input\n                className=\"pa3 bg-lightest-blue ba b--green\"\n                type=\"search\"\n                placeholder=\"Search Robots\"\n                onChange={searchChange}\n            ></input>\n        </div>\n    );\n};\n\nexport default SearchBox;\n","import React, { Component } from 'react'\n\nclass ErrorBoundary extends Component {\n    state = {\n        hasError: false\n    }\n\n    componentDidCatch = (error, info) => {\n        this.setState({hasError: true})\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Ooops. That is not good</h1>\n        }\n        return this.props.children\n    }\n    \n}\n\nexport default ErrorBoundary\n","import React from \"react\";\n\nconst Header = () => {\n    return <h1 className=\"f1\">RoboFriends</h1>;\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport CardList from \"../components/Card_List\";\nimport Scroll from \"../components/Scroll\";\nimport SearchBox from \"../components/SearchBox\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport Header from '../components/Header'\n\nimport { setSearchField, requestRobots } from \"../actions\";\nimport \"./App.css\";\n\nclass App extends Component {\n\n    componentDidMount = () => {\n        this.props.onRequestRobots()\n    };\n\n    render() {\n        const { robots, isPending, searchField, onSearchChange } = this.props;\n        const filteredRobots = robots.filter((robot) => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n        return isPending ? (\n            <h1>Loading...</h1>\n        ) : (\n            <div className=\"tc\">\n                <Header />\n                <SearchBox\n                    searchChange={onSearchChange}\n                    searchField={searchField}\n                />\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={filteredRobots} />\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n        .then((response) => {\n            return response.json();\n        })\n        .then((data) =>\n            dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data })\n        )\n        .catch((err) =>\n            dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err })\n        );\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n} from \"./constants\";\n\nconst initialStateSearch = {\n    searchField: \"\",\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return { ...state, searchField: action.payload };\n\n        default:\n            return state;\n    }\n};\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return {\n                ...state,\n                isPending: true\n            }\n        case REQUEST_ROBOTS_SUCCESS:\n            return {\n                ...state,\n                isPending: false,\n                robots: action.payload\n            }\n        case REQUEST_ROBOTS_FAILED:\n            return {\n                ...state,\n                error: action.payload,\n                isPending: false\n            }\n    \n        default:\n            return state\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware, compose, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\n// import {createLogger} from 'redux-logger'\nimport thunkMiddleware from \"redux-thunk\";\n\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport { searchRobots, requestRobots } from \"./reducers\";\n\n// const logger = createLogger()\n// const store = createStore(searchRobots, applyMiddleware(logger));\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst middleware = [thunkMiddleware];\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(...middleware))\n);\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}